PROCEDURE IntToReal(n: INTEGER);
    VAR result: REAL; absN: INTEGER; isNeg: BOOLEAN; intResult: INTEGER; furthestOne: INTEGER; count: INTEGER; tempN: INTEGER; lastBit: INTEGER; fullExponent: INTEGER; exponent: INTEGER; mantissa: INTEGER; mantissaMask: INTEGER; toShiftOver: INTEGER;
    BEGIN
       absN := Abs(n);
       tempN := absN;
       count := 0;
       isNeg := IntIsNegative(n);
       IF (IntIsZero(tempN)) THEN
        intResult := 0
       ELSE
        WHILE ~IntIsZero(tempN) DO
          lastBit := tempN BAND 1;
          IF lastBit = 1 THEN
              furthestOne := count
          END;
          count := count + 1;
          tempN := tempN >> 1;
        END;

        IF (furthestOne > 23) THEN
            absN := absN >> (furthestOne - 23);
        ELSIF (furthestOne < 23) THEN
            absN := absN << (23 - furthestOne);
        END;

        exponent := furthestOne + realBias;

        mantissaMask := 07fffffH;
        mantissa := absN BAND mantissaMask;
        intResult := mantissa;
        intResult := intResult BOR (exponent << 23);
        IF isNeg THEN
            intResult := intResult BOR (1 << 31);
        END
       END;
       result := IntBinaryAsReal(intResult)
       RETURN result
    END IntToReal;
PROCEDURE RealToInt(n: REAL);
    VAR result: INTEGER; exp: INTEGER; mantissa: INTEGER; sign: INTEGER; fullMantissa: INTEGER; 
    BEGIN
	exp := RealExponent(n);
	mantissa := RealMantissa(n);
	sign := RealSign(n);
	IF exp > 0 THEN
	   fullMantissa := mantissa << exp
	ELSIF exp < 0 THEN
	   fullMantissa := mantissa >> exp
	ELSE
	   fullMantissa := mantissa
	END;
	result := fullMantissa >> 23;
	IF sign = 1 THEN
	    result := BNOT result;
	    result := result + 1;
	END
	RETURN result
    END RealToInt;
PROCEDURE BoolToInt(b: BOOLEAN);
    VAR result: INTEGER;
    BEGIN
        IF b THEN
            result := 1
        ELSE
            result := 0
        END
        RETURN result
    END BoolToInt;
PROCEDURE BoolToReal(b: BOOLEAN);
    VAR result: REAL;
    BEGIN
        IF b THEN
            result := 1.0
        ELSE
            result := 2.0
        END
        RETURN result
    END BoolToReal;
PROCEDURE IntToBool(n: INTEGER);
    VAR result: BOOLEAN;
    BEGIN
        IF IntIsZero(n) THEN
            result := FALSE
        ELSE
            result := TRUE
        END
        RETURN result
    END IntToBool;
PROCEDURE RealToBool(r: REAL);
    VAR result: BOOLEAN;
    BEGIN
        IF RealIsZero(r) THEN
            result := FALSE
        ELSE
            result := TRUE
        END
        RETURN result
    END RealToBool;
PROCEDURE RealBinaryAsInt(r: REAL);
    VAR result: INTEGER; temp: REAL;
    BEGIN
        asm("LDR %dr, %ua": temp, r);
	    asm("STR %ur, %da": temp, result)
	RETURN result
    END RealBinaryAsInt;
PROCEDURE IntBinaryAsReal(n: INTEGER);
    VAR result: REAL; temp: INTEGER;
    BEGIN
	    asm("LDR %dr, %ua": temp, n);
	    asm("STR %ur, %da": temp, result)
        RETURN result
    END IntBinaryAsReal;
PROCEDURE BoolBinaryAsReal(b: BOOLEAN);
    VAR result: REAL; temp: INTEGER;
    BEGIN
        asm("LDRB %dr, %ua": temp, b);
        asm("STR %ur, %da": temp, result)
        RETURN result
    END BoolBinaryAsReal;
PROCEDURE RealBinaryAsBool(r: REAL);
    VAR result: BOOLEAN; temp: INTEGER;
    BEGIN
        asm("LDR %dr, %ua": temp, r);
        asm("STRB %ur, %da": temp, result)
        RETURN result
    END RealBinaryAsBool;
PROCEDURE BoolBinaryAsInt(b: BOOLEAN);
    VAR result: INTEGER; temp: INTEGER;
    BEGIN
        asm("LDRB %dr, %ua": temp, b);
        asm("STR %ur, %da": temp, result)
        RETURN result
    END BoolBinaryAsInt;
PROCEDURE IntBinaryAsBool(n: INTEGER);
    VAR result: BOOLEAN; temp: INTEGER;
    BEGIN
        asm("LDR %dr, %ua": temp, n);
        asm("STRB %ur, %da": temp, result)
        RETURN result
    END IntBinaryAsBool;
PROCEDURE StringAsAddress(s: STRING);
   VAR result: INTEGER; temp: INTEGER;
   BEGIN
      asm("LDR %dr, %ua": temp, s);
      asm("STR %ur, %da": temp, result);
      RETURN result
   END StringAsAddress;