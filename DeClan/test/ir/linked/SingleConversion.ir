SYMBOL SECTION
 ENTRY f33 CONST INTERNAL GLOBAL i  <INT>
 ENTRY f34 INTERNAL GLOBAL result  <REAL>
 ENTRY f35 INTERNAL GLOBAL readResult  <REAL>
 ENTRY f36 INTERNAL result IntToReal <REAL>
 ENTRY f37 INTERNAL absN IntToReal <INT>
 ENTRY f38 INTERNAL isNeg IntToReal <BOOL>
 ENTRY f39 INTERNAL intResult IntToReal <INT>
 ENTRY f40 INTERNAL furthestOne IntToReal <INT>
 ENTRY f41 INTERNAL count IntToReal <INT>
 ENTRY f42 INTERNAL tempN IntToReal <INT>
 ENTRY f43 INTERNAL lastBit IntToReal <INT>
 ENTRY f44 INTERNAL fullExponent IntToReal <INT>
 ENTRY f45 INTERNAL exponent IntToReal <INT>
 ENTRY f46 INTERNAL mantissa IntToReal <INT>
 ENTRY f47 INTERNAL mantissaMask IntToReal <INT>
 ENTRY f48 INTERNAL toShiftOver IntToReal <INT>
 ENTRY f49 INTERNAL result Abs <INT>
 ENTRY f52 INTERNAL PARAM n Abs 0 <INT>
 ENTRY f54 INTERNAL result INeg <INT>
 ENTRY f56 INTERNAL PARAM n INeg 0 <INT>
 ENTRY f59 INTERNAL RETURN INeg <INT>
 ENTRY f61 INTERNAL RETURN Abs <INT>
 ENTRY g45 INTERNAL PARAM n IntToReal 0 <INT>
 ENTRY f64 INTERNAL result IntIsNegative <BOOL>
 ENTRY f65 INTERNAL thirtyFirstBit IntIsNegative <INT>
 ENTRY f68 INTERNAL PARAM n IntIsNegative 0 <INT>
 ENTRY f76 INTERNAL RETURN IntIsNegative <BOOL>
 ENTRY f78 INTERNAL result IntIsZero <BOOL>
 ENTRY f81 INTERNAL PARAM n IntIsZero 0 <INT>
 ENTRY f85 INTERNAL RETURN IntIsZero <BOOL>
 ENTRY g28 CONST INTERNAL GLOBAL realBias  <INT>
 ENTRY g39 INTERNAL result IntBinaryAsReal <REAL>
 ENTRY g40 INTERNAL temp IntBinaryAsReal <INT>
 ENTRY g41 INTERNAL RETURN IntBinaryAsReal <REAL>
 ENTRY g44 INTERNAL RETURN IntToReal <REAL>
 ENTRY g47 INTERNAL tempReg WriteReal <INT>
 ENTRY g48 INTERNAL PARAM r WriteReal 0 <REAL>
DATA SECTION
 DEF f32 := 5 <INT>
 DEF GLOBAL f33 := f32 <INT>
 DEF g26 := 127 <INT>
 DEF GLOBAL g28 := g26 <INT>
BSS SECTION
 DEF GLOBAL f34 := 0.0 <REAL>
 DEF GLOBAL f35 := 0.0 <REAL>
CODE SECTION
 CALL IntToReal([(GLOBAL f33) -> g45]<INT>) FROM CODE SECTION
 DEF g46 := (RETURN g44) <REAL>
 GLOBAL f34 := g46 <REAL>
 CALL WriteReal([(GLOBAL f34) -> g48]<REAL>) FROM GLOBAL f34 := g46 <REAL>
END
PROC SECTION
 PROC LABEL IntToReal
  DEF f36 := 0.0 <REAL>
  DEF f37 := 0 <INT>
  DEF f38 := FALSE <BOOL>
  DEF f39 := 0 <INT>
  DEF f40 := 0 <INT>
  DEF f41 := 0 <INT>
  DEF f42 := 0 <INT>
  DEF f43 := 0 <INT>
  DEF f44 := 0 <INT>
  DEF f45 := 0 <INT>
  DEF f46 := 0 <INT>
  DEF f47 := 0 <INT>
  DEF f48 := 0 <INT>
  CALL Abs([(PARAM g45) -> f52]<INT>) FROM DEF f48 := 0 <INT>
  DEF f62 := (RETURN f61) <INT>
  f37 := f62 <INT>
  f42 := f37 <INT>
  DEF f63 := 0 <INT>
  f41 := f63 <INT>
  CALL IntIsNegative([(PARAM g45) -> f68]<INT>) FROM f41 := f63 <INT>
  DEF f77 := (RETURN f76) <BOOL>
  f38 := f77 <BOOL>
  CALL IntIsZero([f42 -> f81]<INT>) FROM f38 := f77 <BOOL>
  DEF f86 := (RETURN f85) <BOOL>
  DEF f87 := TRUE <BOOL>
  IF f86 BEQ f87
  THEN IFSTAT_0_SEQ_0_LEVEL_0_1
  ELSE IFNEXT_0_SEQ_0_LEVEL_0_1
  LABEL IFSTAT_0_SEQ_0_LEVEL_0_1
  DEF f88 := 0 <INT>
  f39 := f88 <INT>
  GOTO IFEND_0_LEVEL_0_1 FROM f39 := f88 <INT>
  LABEL IFNEXT_0_SEQ_0_LEVEL_0_1
  CALL IntIsZero([f42 -> f81]<INT>) FROM LABEL IFNEXT_0_SEQ_0_LEVEL_0_1
  DEF f89 := (RETURN f85) <BOOL>
  DEF f90 := BNOT f89 <BOOL>
  DEF f91 := TRUE <BOOL>
  IF f90 BEQ f91
  THEN WHILESTAT_0_SEQ_0_LEVEL_0_0
  ELSE WHILENEXT_0_SEQ_0_LEVEL_0_0
  LABEL WHILECOND_0_SEQ_0_LEVEL_0_0
  IF f90 BEQ f91
  THEN WHILESTAT_0_SEQ_0_LEVEL_0_0
  ELSE WHILEEND_0_LEVEL_0_0
  LABEL WHILESTAT_0_SEQ_0_LEVEL_0_0
  DEF f92 := 1 <INT>
  DEF f93 := f42 IAND f92 <INT>
  f43 := f93 <INT>
  DEF f94 := 1 <INT>
  DEF f95 := f43 IEQ f94 <BOOL>
  DEF f96 := TRUE <BOOL>
  IF f95 BEQ f96
  THEN IFSTAT_1_SEQ_0_LEVEL_1
  ELSE IFNEXT_1_SEQ_0_LEVEL_1
  LABEL IFSTAT_1_SEQ_0_LEVEL_1
  f40 := f41 <INT>
  GOTO IFEND_1_LEVEL_1 FROM f40 := f41 <INT>
  LABEL IFNEXT_1_SEQ_0_LEVEL_1
  LABEL IFEND_1_LEVEL_1
  DEF f97 := 1 <INT>
  DEF f98 := f41 IADD f97 <INT>
  f41 := f98 <INT>
  DEF f99 := 1 <INT>
  DEF g10 := f42 IRSHIFT f99 <INT>
  f42 := g10 <INT>
  CALL IntIsZero([f42 -> f81]<INT>) FROM f42 := g10 <INT>
  DEF g11 := (RETURN f85) <BOOL>
  DEF g12 := BNOT g11 <BOOL>
  f90 := g12 <BOOL>
  GOTO WHILECOND_0_SEQ_0_LEVEL_0_0 FROM f90 := g12 <BOOL>
  LABEL WHILENEXT_0_SEQ_0_LEVEL_0_0
  LABEL WHILEEND_0_LEVEL_0_0
  DEF g13 := 23 <INT>
  DEF g14 := f40 GT g13 <BOOL>
  DEF g15 := TRUE <BOOL>
  IF g14 BEQ g15
  THEN IFSTAT_2_SEQ_0_LEVEL_1_0
  ELSE IFNEXT_2_SEQ_0_LEVEL_1_0
  LABEL IFSTAT_2_SEQ_0_LEVEL_1_0
  DEF g16 := 23 <INT>
  DEF g17 := f40 ISUB g16 <INT>
  DEF g18 := f37 IRSHIFT g17 <INT>
  f37 := g18 <INT>
  GOTO IFEND_2_LEVEL_1_0 FROM f37 := g18 <INT>
  LABEL IFNEXT_2_SEQ_0_LEVEL_1_0
  DEF g19 := 23 <INT>
  DEF g20 := f40 LT g19 <BOOL>
  DEF g21 := TRUE <BOOL>
  IF g20 BEQ g21
  THEN IFSTAT_2_SEQ_1_LEVEL_1_0
  ELSE IFNEXT_2_SEQ_1_LEVEL_1_0
  LABEL IFSTAT_2_SEQ_1_LEVEL_1_0
  DEF g22 := 23 <INT>
  DEF g23 := g22 ISUB f40 <INT>
  DEF g24 := f37 ILSHIFT g23 <INT>
  f37 := g24 <INT>
  GOTO IFEND_2_LEVEL_1_0 FROM f37 := g24 <INT>
  LABEL IFNEXT_2_SEQ_1_LEVEL_1_0
  LABEL IFEND_2_LEVEL_1_0
  DEF g25 := f40 IADD (GLOBAL g28) <INT>
  f45 := g25 <INT>
  DEF g29 := 8388607 <INT>
  f47 := g29 <INT>
  DEF g30 := f37 IAND f47 <INT>
  f46 := g30 <INT>
  f39 := f46 <INT>
  DEF g31 := 23 <INT>
  DEF g32 := f45 ILSHIFT g31 <INT>
  DEF g33 := f39 IOR g32 <INT>
  f39 := g33 <INT>
  DEF g34 := TRUE <BOOL>
  IF f38 BEQ g34
  THEN IFSTAT_3_SEQ_0_LEVEL_1
  ELSE IFNEXT_3_SEQ_0_LEVEL_1
  LABEL IFSTAT_3_SEQ_0_LEVEL_1
  DEF g35 := 1 <INT>
  DEF g36 := 31 <INT>
  DEF g37 := g35 ILSHIFT g36 <INT>
  DEF g38 := f39 IOR g37 <INT>
  f39 := g38 <INT>
  GOTO IFEND_3_LEVEL_1 FROM f39 := g38 <INT>
  LABEL IFNEXT_3_SEQ_0_LEVEL_1
  LABEL IFEND_3_LEVEL_1
  GOTO IFEND_0_LEVEL_0_1 FROM LABEL IFEND_3_LEVEL_1
  LABEL IFNEXT_0_SEQ_1_LEVEL_0_1
  LABEL IFEND_0_LEVEL_0_1
  CALL IntBinaryAsReal([f39 -> g42]<INT>) FROM LABEL IFEND_0_LEVEL_0_1
  DEF g43 := (RETURN g41) <REAL>
  f36 := g43 <REAL>
  DEF RETURN g44 := f36 <REAL>
 RETURN FROM IntToReal
 PROC LABEL Abs
  DEF f49 := 0 <INT>
  DEF f50 := 0 <INT>
  DEF f51 := (PARAM f52) GE f50 <BOOL>
  DEF f53 := TRUE <BOOL>
  IF f51 BEQ f53
  THEN IFSTAT_0_SEQ_0_LEVEL_0_0
  ELSE IFNEXT_0_SEQ_0_LEVEL_0_0
  LABEL IFSTAT_0_SEQ_0_LEVEL_0_0
  f49 := (PARAM f52) <INT>
  GOTO IFEND_0_LEVEL_0_0 FROM f49 := (PARAM f52) <INT>
  LABEL IFNEXT_0_SEQ_0_LEVEL_0_0
  CALL INeg([(PARAM f52) -> f56]<INT>) FROM LABEL IFNEXT_0_SEQ_0_LEVEL_0_0
  DEF f60 := (RETURN f59) <INT>
  f49 := f60 <INT>
  GOTO IFEND_0_LEVEL_0_0 FROM f49 := f60 <INT>
  LABEL IFNEXT_0_SEQ_1_LEVEL_0_0
  LABEL IFEND_0_LEVEL_0_0
  DEF RETURN f61 := f49 <INT>
 RETURN FROM Abs
 PROC LABEL INeg
  DEF f54 := 0 <INT>
  DEF f55 := INOT (PARAM f56) <INT>
  DEF f57 := 1 <INT>
  DEF f58 := f55 IADD f57 <INT>
  f54 := f58 <INT>
  DEF RETURN f59 := f54 <INT>
 RETURN FROM INeg
 PROC LABEL IntIsNegative
  DEF f64 := FALSE <BOOL>
  DEF f65 := 0 <INT>
  DEF f66 := 31 <INT>
  DEF f67 := (PARAM f68) IRSHIFT f66 <INT>
  DEF f69 := 1 <INT>
  DEF f70 := f67 IAND f69 <INT>
  f65 := f70 <INT>
  DEF f71 := 0 <INT>
  DEF f72 := f65 IEQ f71 <BOOL>
  DEF f73 := TRUE <BOOL>
  IF f72 BEQ f73
  THEN IFSTAT_2_SEQ_0_LEVEL_0_0
  ELSE IFNEXT_2_SEQ_0_LEVEL_0_0
  LABEL IFSTAT_2_SEQ_0_LEVEL_0_0
  DEF f74 := FALSE <BOOL>
  f64 := f74 <BOOL>
  GOTO IFEND_2_LEVEL_0_0 FROM f64 := f74 <BOOL>
  LABEL IFNEXT_2_SEQ_0_LEVEL_0_0
  DEF f75 := TRUE <BOOL>
  f64 := f75 <BOOL>
  GOTO IFEND_2_LEVEL_0_0 FROM f64 := f75 <BOOL>
  LABEL IFNEXT_2_SEQ_1_LEVEL_0_0
  LABEL IFEND_2_LEVEL_0_0
  DEF RETURN f76 := f64 <BOOL>
 RETURN FROM IntIsNegative
 PROC LABEL IntIsZero
  DEF f78 := FALSE <BOOL>
  DEF f79 := 0 <INT>
  DEF f80 := (PARAM f81) IEQ f79 <BOOL>
  DEF f82 := TRUE <BOOL>
  IF f80 BEQ f82
  THEN IFSTAT_1_SEQ_0_LEVEL_0_0
  ELSE IFNEXT_1_SEQ_0_LEVEL_0_0
  LABEL IFSTAT_1_SEQ_0_LEVEL_0_0
  DEF f83 := TRUE <BOOL>
  f78 := f83 <BOOL>
  GOTO IFEND_1_LEVEL_0_0 FROM f78 := f83 <BOOL>
  LABEL IFNEXT_1_SEQ_0_LEVEL_0_0
  DEF f84 := FALSE <BOOL>
  f78 := f84 <BOOL>
  GOTO IFEND_1_LEVEL_0_0 FROM f78 := f84 <BOOL>
  LABEL IFNEXT_1_SEQ_1_LEVEL_0_0
  LABEL IFEND_1_LEVEL_0_0
  DEF RETURN f85 := f78 <BOOL>
 RETURN FROM IntIsZero
 PROC LABEL IntBinaryAsReal
  DEF g39 := 0.0 <REAL>
  DEF g40 := 0 <INT>
  IPARAM g40
  IPARAM (PARAM g42)
  IASM "LDR %r, %a"
  IPARAM g40
  IPARAM g39
  IASM "STR %r, %a"
  DEF RETURN g41 := g39 <REAL>
 RETURN FROM IntBinaryAsReal
 PROC LABEL WriteReal
  DEF g47 := 0 <INT>
  IPARAM g47
  IASM "MOV %r, R0"
  IPARAM (PARAM g48)
  IASM "LDR R0, %a"
  IASM "SWI 2"
  IPARAM g47
  IASM "MOV R0, %r"
 RETURN FROM WriteReal
