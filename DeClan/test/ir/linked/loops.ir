SYMBOL SECTION
 ENTRY f32 INTERNAL GLOBAL i  <INT>
 ENTRY f35 INTERNAL tempReg WriteInt <INT>
 ENTRY f36 INTERNAL PARAM i WriteInt 0 <INT>
 ENTRY f44 INTERNAL result INeg <INT>
 ENTRY f46 INTERNAL PARAM n INeg 0 <INT>
 ENTRY f49 INTERNAL RETURN INeg <INT>
 ENTRY f67 INTERNAL total Mod <INT>
 ENTRY f68 INTERNAL result Mod <INT>
 ENTRY f69 INTERNAL PARAM dividend Mod 0 <INT>
 ENTRY f71 INTERNAL PARAM divisor Mod 1 <INT>
 ENTRY f79 INTERNAL RETURN Mod <INT>
DATA SECTION
BSS SECTION
 DEF GLOBAL f32 := 0 <INT>
CODE SECTION
 DEF f33 := 1 <INT>
 GLOBAL f32 := f33 <INT>
 DEF f34 := 10 <INT>
 LABEL FORBEG_0_LEVEL_0
 IF (GLOBAL f32) LT f34
 THEN FORLOOP_0_LEVEL_0
 ELSE FOREND_0_LEVEL_0
 LABEL FORLOOP_0_LEVEL_0
 CALL WriteInt([(GLOBAL f32) -> f36]<INT>)
 DEF f37 := 1 <INT>
 GLOBAL f32 := (GLOBAL f32) IADD f37 <INT>
 GOTO FORBEG_0_LEVEL_0
 LABEL FOREND_0_LEVEL_0
 CALL WriteLn()
 DEF f38 := 1 <INT>
 GLOBAL f32 := f38 <INT>
 DEF f39 := 10 <INT>
 LABEL FORBEG_1_LEVEL_0
 IF (GLOBAL f32) LT f39
 THEN FORLOOP_1_LEVEL_0
 ELSE FOREND_1_LEVEL_0
 LABEL FORLOOP_1_LEVEL_0
 CALL WriteInt([(GLOBAL f32) -> f36]<INT>)
 DEF f40 := 2 <INT>
 GLOBAL f32 := (GLOBAL f32) IADD f40 <INT>
 GOTO FORBEG_1_LEVEL_0
 LABEL FOREND_1_LEVEL_0
 CALL WriteLn()
 DEF f41 := 10 <INT>
 GLOBAL f32 := f41 <INT>
 DEF f42 := 1 <INT>
 LABEL FORBEG_2_LEVEL_0
 IF (GLOBAL f32) GT f42
 THEN FORLOOP_2_LEVEL_0
 ELSE FOREND_2_LEVEL_0
 LABEL FORLOOP_2_LEVEL_0
 CALL WriteInt([(GLOBAL f32) -> f36]<INT>)
 DEF f43 := 2 <INT>
 CALL INeg([f43 -> f46]<INT>)
 DEF f50 := (RETURN f49) <INT>
 GLOBAL f32 := (GLOBAL f32) IADD f50 <INT>
 GOTO FORBEG_2_LEVEL_0
 LABEL FOREND_2_LEVEL_0
 CALL WriteLn()
 DEF f51 := 10 <INT>
 GLOBAL f32 := f51 <INT>
 DEF f52 := 1 <INT>
 LABEL FORBEG_3_LEVEL_0
 IF (GLOBAL f32) GT f52
 THEN FORLOOP_3_LEVEL_0
 ELSE FOREND_3_LEVEL_0
 LABEL FORLOOP_3_LEVEL_0
 CALL WriteInt([(GLOBAL f32) -> f36]<INT>)
 DEF f53 := 1 <INT>
 CALL INeg([f53 -> f46]<INT>)
 DEF f54 := (RETURN f49) <INT>
 GLOBAL f32 := (GLOBAL f32) IADD f54 <INT>
 GOTO FORBEG_3_LEVEL_0
 LABEL FOREND_3_LEVEL_0
 CALL WriteLn()
 DEF f55 := 1 <INT>
 GLOBAL f32 := f55 <INT>
 DEF f56 := 10 <INT>
 DEF f57 := (GLOBAL f32) LE f56 <BOOL>
 DEF f58 := TRUE <BOOL>
 IF f57 BEQ f58
 THEN WHILESTAT_0_SEQ_0_LEVEL_0_0
 ELSE WHILENEXT_0_SEQ_0_LEVEL_0_0
 LABEL WHILECOND_0_SEQ_0_LEVEL_0_0
 IF f57 BEQ f58
 THEN WHILESTAT_0_SEQ_0_LEVEL_0_0
 ELSE WHILEEND_0_LEVEL_0_0
 LABEL WHILESTAT_0_SEQ_0_LEVEL_0_0
 CALL WriteInt([(GLOBAL f32) -> f36]<INT>)
 DEF f59 := 1 <INT>
 DEF f60 := (GLOBAL f32) IADD f59 <INT>
 GLOBAL f32 := f60 <INT>
 DEF f61 := 10 <INT>
 DEF f62 := (GLOBAL f32) LE f61 <BOOL>
 f57 := f62 <BOOL>
 GOTO WHILECOND_0_SEQ_0_LEVEL_0_0
 LABEL WHILENEXT_0_SEQ_0_LEVEL_0_0
 LABEL WHILEEND_0_LEVEL_0_0
 CALL WriteLn()
 DEF f63 := 1 <INT>
 GLOBAL f32 := f63 <INT>
 DEF f64 := 10 <INT>
 DEF f65 := (GLOBAL f32) LE f64 <BOOL>
 DEF f66 := 2 <INT>
 CALL Mod([(GLOBAL f32) -> f69]<INT>, [f66 -> f71]<INT>)
 DEF f80 := (RETURN f79) <INT>
 DEF f81 := 1 <INT>
 DEF f82 := f80 IEQ f81 <BOOL>
 DEF f83 := f65 LAND f82 <BOOL>
 DEF f84 := TRUE <BOOL>
 IF f83 BEQ f84
 THEN WHILESTAT_2_SEQ_0_LEVEL_0_0
 ELSE WHILENEXT_2_SEQ_0_LEVEL_0_0
 LABEL WHILECOND_2_SEQ_0_LEVEL_0_0
 IF f83 BEQ f84
 THEN WHILESTAT_2_SEQ_0_LEVEL_0_0
 ELSE WHILEEND_2_LEVEL_0_0
 LABEL WHILESTAT_2_SEQ_0_LEVEL_0_0
 CALL WriteInt([(GLOBAL f32) -> f36]<INT>)
 DEF f85 := 1 <INT>
 DEF f86 := (GLOBAL f32) IADD f85 <INT>
 GLOBAL f32 := f86 <INT>
 DEF f87 := 10 <INT>
 DEF f88 := (GLOBAL f32) LE f87 <BOOL>
 DEF f89 := 2 <INT>
 CALL Mod([(GLOBAL f32) -> f69]<INT>, [f89 -> f71]<INT>)
 DEF f90 := (RETURN f79) <INT>
 DEF f91 := 1 <INT>
 DEF f92 := f90 IEQ f91 <BOOL>
 DEF f93 := f88 LAND f92 <BOOL>
 f83 := f93 <BOOL>
 GOTO WHILECOND_2_SEQ_0_LEVEL_0_0
 LABEL WHILENEXT_2_SEQ_0_LEVEL_0_0
 DEF f94 := 10 <INT>
 DEF f95 := (GLOBAL f32) LE f94 <BOOL>
 DEF f96 := TRUE <BOOL>
 IF f95 BEQ f96
 THEN WHILESTAT_2_SEQ_1_LEVEL_0
 ELSE WHILENEXT_2_SEQ_1_LEVEL_0
 LABEL WHILECOND_2_SEQ_1_LEVEL_0
 IF f95 BEQ f96
 THEN WHILESTAT_2_SEQ_1_LEVEL_0
 ELSE WHILEEND_2_LEVEL_0_0
 LABEL WHILESTAT_2_SEQ_1_LEVEL_0
 DEF f97 := 1 <INT>
 DEF f98 := (GLOBAL f32) IADD f97 <INT>
 GLOBAL f32 := f98 <INT>
 DEF f99 := 10 <INT>
 DEF g10 := (GLOBAL f32) LE f99 <BOOL>
 f95 := g10 <BOOL>
 GOTO WHILECOND_2_SEQ_1_LEVEL_0
 LABEL WHILENEXT_2_SEQ_1_LEVEL_0
 LABEL WHILEEND_2_LEVEL_0_0
 CALL WriteLn()
 DEF g11 := 10 <INT>
 GLOBAL f32 := g11 <INT>
 DEF g12 := 1 <INT>
 DEF g13 := (GLOBAL f32) LT g12 <BOOL>
 DEF g14 := TRUE <BOOL>
 LABEL REPEATBEG_0_LEVEL_0
 IF g13 BEQ g14
 THEN REPEATEND_0_LEVEL_0
 ELSE REPEATLOOP_0_LEVEL_0
 LABEL REPEATLOOP_0_LEVEL_0
 CALL WriteInt([(GLOBAL f32) -> f36]<INT>)
 DEF g15 := 2 <INT>
 DEF g16 := (GLOBAL f32) ISUB g15 <INT>
 GLOBAL f32 := g16 <INT>
 DEF g17 := 1 <INT>
 DEF g18 := (GLOBAL f32) LT g17 <BOOL>
 g13 := g18 <BOOL>
 GOTO REPEATBEG_0_LEVEL_0
 LABEL REPEATEND_0_LEVEL_0
 CALL WriteLn()
 DEF g19 := 10 <INT>
 GLOBAL f32 := g19 <INT>
 DEF g20 := 1 <INT>
 DEF g21 := (GLOBAL f32) GE g20 <BOOL>
 DEF g22 := TRUE <BOOL>
 LABEL REPEATBEG_1_LEVEL_0
 IF g21 BEQ g22
 THEN REPEATEND_1_LEVEL_0
 ELSE REPEATLOOP_1_LEVEL_0
 LABEL REPEATLOOP_1_LEVEL_0
 CALL WriteInt([(GLOBAL f32) -> f36]<INT>)
 DEF g23 := 1 <INT>
 DEF g24 := (GLOBAL f32) IADD g23 <INT>
 GLOBAL f32 := g24 <INT>
 DEF g25 := 1 <INT>
 DEF g26 := (GLOBAL f32) GE g25 <BOOL>
 g21 := g26 <BOOL>
 GOTO REPEATBEG_1_LEVEL_0
 LABEL REPEATEND_1_LEVEL_0
 CALL WriteLn()
END
PROC SECTION
 PROC LABEL WriteInt
  DEF f35 := 0 <INT>
  IPARAM f35
  IASM "MOV %r, R0"
  IPARAM (PARAM f36)
  IASM "LDR R0, %a"
  IASM "SWI 1"
  IPARAM f35
  IASM "MOV R0, %r"
 RETURN FROM WriteInt
 PROC LABEL WriteLn
  IASM "SWI 4"
 RETURN FROM WriteLn
 PROC LABEL INeg
  DEF f44 := 0 <INT>
  DEF f45 := INOT (PARAM f46) <INT>
  DEF f47 := 1 <INT>
  DEF f48 := f45 IADD f47 <INT>
  f44 := f48 <INT>
  DEF RETURN f49 := f44 <INT>
 RETURN FROM INeg
 PROC LABEL Mod
  DEF f67 := 0 <INT>
  DEF f68 := 0 <INT>
  f67 := (PARAM f69) <INT>
  DEF f70 := f67 ISUB (PARAM f71) <INT>
  DEF f72 := 0 <INT>
  DEF f73 := f70 GE f72 <BOOL>
  DEF f74 := TRUE <BOOL>
  IF f73 BEQ f74
  THEN WHILESTAT_4_SEQ_0_LEVEL_0_0
  ELSE WHILENEXT_4_SEQ_0_LEVEL_0_0
  LABEL WHILECOND_4_SEQ_0_LEVEL_0_0
  IF f73 BEQ f74
  THEN WHILESTAT_4_SEQ_0_LEVEL_0_0
  ELSE WHILEEND_4_LEVEL_0_0
  LABEL WHILESTAT_4_SEQ_0_LEVEL_0_0
  DEF f75 := f67 ISUB (PARAM f71) <INT>
  f67 := f75 <INT>
  DEF f76 := f67 ISUB (PARAM f71) <INT>
  DEF f77 := 0 <INT>
  DEF f78 := f76 GE f77 <BOOL>
  f73 := f78 <BOOL>
  GOTO WHILECOND_4_SEQ_0_LEVEL_0_0
  LABEL WHILENEXT_4_SEQ_0_LEVEL_0_0
  LABEL WHILEEND_4_LEVEL_0_0
  DEF RETURN f79 := f67 <INT>
 RETURN FROM Mod
