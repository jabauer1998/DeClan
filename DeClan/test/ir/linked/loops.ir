SYMBOL SECTION
 ENTRY f24 INTERNAL GLOBAL i  <INT>
 ENTRY f27 INTERNAL tempReg WriteInt <INT>
 ENTRY f28 INTERNAL PARAM i WriteInt 0 <INT>
 ENTRY f36 INTERNAL result INeg <INT>
 ENTRY f38 INTERNAL PARAM n INeg 0 <INT>
 ENTRY f41 INTERNAL RETURN INeg <INT>
 ENTRY f59 INTERNAL total Mod <INT>
 ENTRY f60 INTERNAL result Mod <INT>
 ENTRY f61 INTERNAL PARAM dividend Mod 0 <INT>
 ENTRY f63 INTERNAL PARAM divisor Mod 1 <INT>
 ENTRY f71 INTERNAL RETURN Mod <INT>
DATA SECTION
BSS SECTION
 DEF GLOBAL f24 := 0 <INT>
CODE SECTION
 DEF f25 := 1 <INT>
 GLOBAL f24 := f25 <INT>
 DEF f26 := 10 <INT>
 LABEL FORBEG_0_LEVEL_0
 IF (GLOBAL f24) LT f26
 THEN FORLOOP_0_LEVEL_0
 ELSE FOREND_0_LEVEL_0
 LABEL FORLOOP_0_LEVEL_0
 CALL WriteInt([(GLOBAL f24) -> f28]<INT>)
 DEF f29 := 1 <INT>
 GLOBAL f24 := (GLOBAL f24) IADD f29 <INT>
 GOTO FORBEG_0_LEVEL_0
 LABEL FOREND_0_LEVEL_0
 CALL WriteLn()
 DEF f30 := 1 <INT>
 GLOBAL f24 := f30 <INT>
 DEF f31 := 10 <INT>
 LABEL FORBEG_1_LEVEL_0
 IF (GLOBAL f24) LT f31
 THEN FORLOOP_1_LEVEL_0
 ELSE FOREND_1_LEVEL_0
 LABEL FORLOOP_1_LEVEL_0
 CALL WriteInt([(GLOBAL f24) -> f28]<INT>)
 DEF f32 := 2 <INT>
 GLOBAL f24 := (GLOBAL f24) IADD f32 <INT>
 GOTO FORBEG_1_LEVEL_0
 LABEL FOREND_1_LEVEL_0
 CALL WriteLn()
 DEF f33 := 10 <INT>
 GLOBAL f24 := f33 <INT>
 DEF f34 := 1 <INT>
 LABEL FORBEG_2_LEVEL_0
 IF (GLOBAL f24) GT f34
 THEN FORLOOP_2_LEVEL_0
 ELSE FOREND_2_LEVEL_0
 LABEL FORLOOP_2_LEVEL_0
 CALL WriteInt([(GLOBAL f24) -> f28]<INT>)
 DEF f35 := 2 <INT>
 CALL INeg([f35 -> f38]<INT>)
 DEF f42 := (RETURN f41) <INT>
 GLOBAL f24 := (GLOBAL f24) IADD f42 <INT>
 GOTO FORBEG_2_LEVEL_0
 LABEL FOREND_2_LEVEL_0
 CALL WriteLn()
 DEF f43 := 10 <INT>
 GLOBAL f24 := f43 <INT>
 DEF f44 := 1 <INT>
 LABEL FORBEG_3_LEVEL_0
 IF (GLOBAL f24) GT f44
 THEN FORLOOP_3_LEVEL_0
 ELSE FOREND_3_LEVEL_0
 LABEL FORLOOP_3_LEVEL_0
 CALL WriteInt([(GLOBAL f24) -> f28]<INT>)
 DEF f45 := 1 <INT>
 CALL INeg([f45 -> f38]<INT>)
 DEF f46 := (RETURN f41) <INT>
 GLOBAL f24 := (GLOBAL f24) IADD f46 <INT>
 GOTO FORBEG_3_LEVEL_0
 LABEL FOREND_3_LEVEL_0
 CALL WriteLn()
 DEF f47 := 1 <INT>
 GLOBAL f24 := f47 <INT>
 DEF f48 := 10 <INT>
 DEF f49 := (GLOBAL f24) LE f48 <BOOL>
 DEF f50 := TRUE <BOOL>
 IF f49 BEQ f50
 THEN WHILESTAT_0_SEQ_0_LEVEL_0_0
 ELSE WHILENEXT_0_SEQ_0_LEVEL_0_0
 LABEL WHILECOND_0_SEQ_0_LEVEL_0_0
 IF f49 BEQ f50
 THEN WHILESTAT_0_SEQ_0_LEVEL_0_0
 ELSE WHILEEND_0_LEVEL_0_0
 LABEL WHILESTAT_0_SEQ_0_LEVEL_0_0
 CALL WriteInt([(GLOBAL f24) -> f28]<INT>)
 DEF f51 := 1 <INT>
 DEF f52 := (GLOBAL f24) IADD f51 <INT>
 GLOBAL f24 := f52 <INT>
 DEF f53 := 10 <INT>
 DEF f54 := (GLOBAL f24) LE f53 <BOOL>
 f49 := f54 <BOOL>
 GOTO WHILECOND_0_SEQ_0_LEVEL_0_0
 LABEL WHILENEXT_0_SEQ_0_LEVEL_0_0
 LABEL WHILEEND_0_LEVEL_0_0
 CALL WriteLn()
 DEF f55 := 1 <INT>
 GLOBAL f24 := f55 <INT>
 DEF f56 := 10 <INT>
 DEF f57 := (GLOBAL f24) LE f56 <BOOL>
 DEF f58 := 2 <INT>
 CALL Mod([(GLOBAL f24) -> f61]<INT>, [f58 -> f63]<INT>)
 DEF f72 := (RETURN f71) <INT>
 DEF f73 := 1 <INT>
 DEF f74 := f72 IEQ f73 <BOOL>
 DEF f75 := f57 LAND f74 <BOOL>
 DEF f76 := TRUE <BOOL>
 IF f75 BEQ f76
 THEN WHILESTAT_2_SEQ_0_LEVEL_0_0
 ELSE WHILENEXT_2_SEQ_0_LEVEL_0_0
 LABEL WHILECOND_2_SEQ_0_LEVEL_0_0
 IF f75 BEQ f76
 THEN WHILESTAT_2_SEQ_0_LEVEL_0_0
 ELSE WHILEEND_2_LEVEL_0_0
 LABEL WHILESTAT_2_SEQ_0_LEVEL_0_0
 CALL WriteInt([(GLOBAL f24) -> f28]<INT>)
 DEF f77 := 1 <INT>
 DEF f78 := (GLOBAL f24) IADD f77 <INT>
 GLOBAL f24 := f78 <INT>
 DEF f79 := 10 <INT>
 DEF f80 := (GLOBAL f24) LE f79 <BOOL>
 DEF f81 := 2 <INT>
 CALL Mod([(GLOBAL f24) -> f61]<INT>, [f81 -> f63]<INT>)
 DEF f82 := (RETURN f71) <INT>
 DEF f83 := 1 <INT>
 DEF f84 := f82 IEQ f83 <BOOL>
 DEF f85 := f80 LAND f84 <BOOL>
 f75 := f85 <BOOL>
 GOTO WHILECOND_2_SEQ_0_LEVEL_0_0
 LABEL WHILENEXT_2_SEQ_0_LEVEL_0_0
 DEF f86 := 10 <INT>
 DEF f87 := (GLOBAL f24) LE f86 <BOOL>
 DEF f88 := TRUE <BOOL>
 IF f87 BEQ f88
 THEN WHILESTAT_2_SEQ_1_LEVEL_0
 ELSE WHILENEXT_2_SEQ_1_LEVEL_0
 LABEL WHILECOND_2_SEQ_1_LEVEL_0
 IF f87 BEQ f88
 THEN WHILESTAT_2_SEQ_1_LEVEL_0
 ELSE WHILEEND_2_LEVEL_0_0
 LABEL WHILESTAT_2_SEQ_1_LEVEL_0
 DEF f89 := 1 <INT>
 DEF f90 := (GLOBAL f24) IADD f89 <INT>
 GLOBAL f24 := f90 <INT>
 DEF f91 := 10 <INT>
 DEF f92 := (GLOBAL f24) LE f91 <BOOL>
 f87 := f92 <BOOL>
 GOTO WHILECOND_2_SEQ_1_LEVEL_0
 LABEL WHILENEXT_2_SEQ_1_LEVEL_0
 LABEL WHILEEND_2_LEVEL_0_0
 CALL WriteLn()
 DEF f93 := 10 <INT>
 GLOBAL f24 := f93 <INT>
 DEF f94 := 1 <INT>
 DEF f95 := (GLOBAL f24) LT f94 <BOOL>
 DEF f96 := TRUE <BOOL>
 LABEL REPEATBEG_0_LEVEL_0
 IF f95 BEQ f96
 THEN REPEATEND_0_LEVEL_0
 ELSE REPEATLOOP_0_LEVEL_0
 LABEL REPEATLOOP_0_LEVEL_0
 CALL WriteInt([(GLOBAL f24) -> f28]<INT>)
 DEF f97 := 2 <INT>
 DEF f98 := (GLOBAL f24) ISUB f97 <INT>
 GLOBAL f24 := f98 <INT>
 DEF f99 := 1 <INT>
 DEF g10 := (GLOBAL f24) LT f99 <BOOL>
 f95 := g10 <BOOL>
 GOTO REPEATBEG_0_LEVEL_0
 LABEL REPEATEND_0_LEVEL_0
 CALL WriteLn()
 DEF g11 := 10 <INT>
 GLOBAL f24 := g11 <INT>
 DEF g12 := 1 <INT>
 DEF g13 := (GLOBAL f24) GE g12 <BOOL>
 DEF g14 := TRUE <BOOL>
 LABEL REPEATBEG_1_LEVEL_0
 IF g13 BEQ g14
 THEN REPEATEND_1_LEVEL_0
 ELSE REPEATLOOP_1_LEVEL_0
 LABEL REPEATLOOP_1_LEVEL_0
 CALL WriteInt([(GLOBAL f24) -> f28]<INT>)
 DEF g15 := 1 <INT>
 DEF g16 := (GLOBAL f24) IADD g15 <INT>
 GLOBAL f24 := g16 <INT>
 DEF g17 := 1 <INT>
 DEF g18 := (GLOBAL f24) GE g17 <BOOL>
 g13 := g18 <BOOL>
 GOTO REPEATBEG_1_LEVEL_0
 LABEL REPEATEND_1_LEVEL_0
 CALL WriteLn()
END
PROC SECTION
 PROC LABEL WriteInt
  DEF f27 := 0 <INT>
  IPARAM f27 <INT> %dr
  IASM "MOV %dr, R0"
  IPARAM (PARAM f28) <INT> %a
  IASM "LDR R0, %ua"
  IASM "SWI 1"
  IPARAM f27 <INT> %r
  IASM "MOV R0, %ur"
 RETURN FROM WriteInt
 PROC LABEL WriteLn
  IASM "SWI 4"
 RETURN FROM WriteLn
 PROC LABEL INeg
  DEF f36 := 0 <INT>
  DEF f37 := INOT (PARAM f38) <INT>
  DEF f39 := 1 <INT>
  DEF f40 := f37 IADD f39 <INT>
  f36 := f40 <INT>
  DEF RETURN f41 := f36 <INT>
 RETURN FROM INeg
 PROC LABEL Mod
  DEF f59 := 0 <INT>
  DEF f60 := 0 <INT>
  f59 := (PARAM f61) <INT>
  DEF f62 := f59 ISUB (PARAM f63) <INT>
  DEF f64 := 0 <INT>
  DEF f65 := f62 GE f64 <BOOL>
  DEF f66 := TRUE <BOOL>
  IF f65 BEQ f66
  THEN WHILESTAT_4_SEQ_0_LEVEL_0_0
  ELSE WHILENEXT_4_SEQ_0_LEVEL_0_0
  LABEL WHILECOND_4_SEQ_0_LEVEL_0_0
  IF f65 BEQ f66
  THEN WHILESTAT_4_SEQ_0_LEVEL_0_0
  ELSE WHILEEND_4_LEVEL_0_0
  LABEL WHILESTAT_4_SEQ_0_LEVEL_0_0
  DEF f67 := f59 ISUB (PARAM f63) <INT>
  f59 := f67 <INT>
  DEF f68 := f59 ISUB (PARAM f63) <INT>
  DEF f69 := 0 <INT>
  DEF f70 := f68 GE f69 <BOOL>
  f65 := f70 <BOOL>
  GOTO WHILECOND_4_SEQ_0_LEVEL_0_0
  LABEL WHILENEXT_4_SEQ_0_LEVEL_0_0
  LABEL WHILEEND_4_LEVEL_0_0
  DEF RETURN f71 := f59 <INT>
 RETURN FROM Mod
